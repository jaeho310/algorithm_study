# 퀵소트는 pivot의 위치를 찾아가는 과정이랑 비슷하다
# pivot을 설정하고 맨끝과 교환한뒤 보낸뒤 두포인터처럼 동작시킨다.
# 좌측은 포인터의 수가 pivot보다 크면 멈추고
# 우측은 포인터의 수가 pivot보다 작으면 멈춘다.
# 우측과 좌측의 포인터의 수를 스왑해주면 큰수는 오른쪽으로
# 작은수는 왼쪽으로 가게되고
# 포인터의 위치가 역전되면 비교를 멈추면 된다.
# 맨끝에 있던 포인터를 원래있던 위치로 복구시키면 1사이클 완료이다.
# recursive하게 안쪽부터 구현된다.

# 쉽게구현하려면 이렇게 해도 된다.
# 대신 공간복잡도가 구려져 느리다.
def solution(a):
    if len(a) <= 1:
        return a
    pivot = a[-1]  # 편의상 리스트의 마지막 값을 기준 값으로 정함
    g1 = []  # 그룹 1: 기준 값보다 작은 값을 담을 리스트
    g2 = []  # 그룹 2: 기준 값보다 큰 값을 담을 리스트
    for i in range(0, len(a) - 1):  # 마지막 값은 기준 값이므로 제외
        if a[i] < pivot:  # 기준 값과 비교
            g1.append(a[i])  # 작으면 g1에 추가
        else:
            g2.append(a[i])  # 크면 g2에 추가
    # 각 그룹에 대해 재귀 호출로 퀵 정렬을 한 후
    # 기준 값과 합쳐 하나의 리스트로 결괏값 반환
    return solution(g1) + [pivot] + solution(g2)

    print(arr)
if __name__ == '__main__':
    arr = [3, 7, 1, 5, 4]
    print(solution(arr))